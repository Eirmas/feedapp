{"version":3,"file":"TextInput.stories-e8b20b19.js","sources":["../../../../app/src/components/atoms/text-input/TextInput.vue","../../../../app/src/components/atoms/text-input/types.ts"],"sourcesContent":["<template>\n  <div\n    :class=\"[\n      'flex flex-col transition-all',\n      error && 'text-semantic-error-dark',\n      disabled && 'text-neutral-medium',\n      size === 'medium' && 'gap-y-1',\n      size === 'small' && 'gap-y-0.5',\n    ]\"\n  >\n    <label>\n      <div\n        v-if=\"!hideLabel\"\n        data-testid=\"label\"\n        :class=\"['text-body-small-bold overflow-x-hidden text-ellipsis', size === 'medium' && 'pb-1', size === 'small' && 'pb-0.5']\"\n      >\n        {{ !label?.trim() ? '&nbsp;' : label }}\n      </div>\n      <span v-if=\"hideLabel\" class=\"sr-only\" data-testid=\"label-sr\">{{ label }}</span>\n      <div\n        :class=\"[\n          iconMode === 'append' && 'flex-row-reverse',\n          error && 'ring-semantic-error-dark text-semantic-error-dark',\n          disabled && 'bg-neutral-background ring-neutral-light text-neutral-medium',\n          'flex items-center rounded-xs bg-neutral-white ring-1 ring-inset text-neutral-dark ring-neutral-light transition-all',\n          size === 'medium' && 'p-2',\n          size === 'small' && 'p-1.5',\n          inputFocused && !error && !readonly && !disabled && '!ring-neutral-dark',\n          readonly && '!ring-neutral-background',\n        ]\"\n        data-testid=\"wrapper\"\n      >\n        <div v-if=\"icon\" class=\"flex\">\n          <component :is=\"icon\" v-if=\"icon\" :class=\"[size === 'medium' && 'w-6 h-6', size === 'small' && 'w-5 h-5']\" />\n        </div>\n        <input\n          v-bind=\"$attrs\"\n          :readonly=\"readonly\"\n          :disabled=\"disabled\"\n          :placeholder=\"placeholder\"\n          :v-focus=\"$attrs.autofocus\"\n          :type=\"type\"\n          :value=\"modelValue\"\n          :class=\"[\n            'border-none p-0 bg-transparent outline-none !ring-0 grow pl-1 text-neutral-dark placeholder:text-neutral-medium',\n            (disabled || readonly) && 'cursor-default',\n            readonly && 'placeholder:text-transparent',\n            size === 'medium' && 'text-body',\n            size === 'small' && 'text-body-small',\n          ]\"\n          @input=\"onInput\"\n          @focus=\"inputFocused = true\"\n          @blur=\"inputFocused = false\"\n        />\n      </div>\n    </label>\n    <div v-if=\"!hideDetails\" data-testid=\"details\" class=\"text-caption mt-0.5 min-h-[18px] break-words relative\">\n      <template v-if=\"!readonly && !disabled\">\n        <Transition>\n          <div v-if=\"!error && inputFocused\" data-testid=\"hint\">{{ hint }}</div>\n        </Transition>\n        <Transition>\n          <div v-if=\"error\" data-testid=\"error\">{{ error }}</div>\n        </Transition>\n      </template>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { ref } from 'vue';\nimport { FunctionalIcon } from '../../../types';\nimport { ITextInputIconModes, ITextInputSizes } from './types';\n\ninterface Props {\n  label?: string;\n  hideLabel?: boolean;\n  hideDetails?: boolean;\n  hint?: string;\n  error?: string;\n  placeholder?: string;\n  readonly?: boolean;\n  type?: string;\n  icon?: FunctionalIcon;\n  iconMode?: ITextInputIconModes;\n  size?: ITextInputSizes;\n  disabled?: boolean;\n  modelValue?: string;\n}\n\nconst onInput = (event: Event) => {\n  emit('update:modelValue', (event.target as HTMLInputElement).value);\n};\n\nwithDefaults(defineProps<Props>(), {\n  size: 'medium',\n  iconMode: 'prepend',\n});\n\nconst inputFocused = ref(false);\n\nconst emit = defineEmits<{\n  (event: 'update:modelValue', payload: string): void;\n}>();\n</script>\n\n<style lang=\"scss\">\n.v-enter-active,\n.v-leave-active {\n  @apply transition-[transform,opacity];\n}\n\n.v-enter-from,\n.v-leave-to {\n  position: absolute;\n  transform: translateY(-8px);\n  opacity: 0;\n}\n</style>\n","export enum TextInputIconModes {\n  PREPEND = 'prepend',\n  APPEND = 'append',\n}\n\nexport enum TextInputSizes {\n  SMALL = 'small',\n  MEDIUM = 'medium',\n}\n\nexport type ITextInputSizes = `${TextInputSizes}`;\nexport type ITextInputIconModes = `${TextInputIconModes}`;\n"],"names":["onInput","event","emit","inputFocused","ref","TextInputIconModes","TextInputSizes"],"mappings":"m1BA0FM,MAAAA,EAAWC,GAAiB,CAC3BC,EAAA,oBAAsBD,EAAM,OAA4B,KAAK,CAAA,EAQ9DE,EAAeC,EAAI,EAAK,86FCnGlB,IAAAC,GAAAA,IACVA,EAAA,QAAU,UACVA,EAAA,OAAS,SAFCA,IAAAA,GAAA,CAAA,CAAA,EAKAC,GAAAA,IACVA,EAAA,MAAQ,QACRA,EAAA,OAAS,SAFCA,IAAAA,GAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;"}